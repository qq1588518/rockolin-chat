#!/usr/bin/env node

/**
 * 模块依赖关系。
 */

var app = require('../app');
var debug = require('debug')('jl-chat:server');
var http = require('http');

/**
 * 从环境中获取端口并快速存储。
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * 创建服务器
 */

var server = http.createServer(app);

/**
 * 在所有网络接口上监听所提供的端口。
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//统计客户端登录用户
var onlineUsers = [];
var iNowUser = '';
// socket
var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {
  console.log(socket.id);
  console.log("1个客户端连接了");
  // 服务器接收用户说的话，然后广播出去
  socket.on("speak", function (msg) {
    iNowUser = msg;
    io.emit("answer", msg);
  });
  socket.on('name', function (msg) {
    onlineUsers.push(msg);
    onlineUsers = Array.from(new Set(onlineUsers));
    io.emit("alluser", onlineUsers);
  })
  // 转发小白说的话
  socket.on('req', function (msg) {
    io.emit("xiaobai", msg);
  })
});

function unique(arrays) {
  arrays.sort(); //先排序
  var res = [arrays[0]];
  for (var i = 1; i < arrays.length; i++) {
    if (arrays[i] !== res[res.length - 1]) {
      res.push(this[i]);
    };
    if (arrays[i] == null) {

    }
  }
  return res;
}
/**
 * 将端口转换成数字，字符串，或假。
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * HTTP服务器“错误”事件的事件侦听器。
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * HTTP服务器“侦听”事件的事件侦听器。
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}